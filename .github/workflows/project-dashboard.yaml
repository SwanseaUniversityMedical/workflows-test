name: Project Dashboard

on:
  pull_request:
    paths:
      - '.github/workflows/project-dashboard.yaml'
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  dashboard:
    runs-on:
      labels: [ self-hosted, linux, x64 ]
      group: light
    steps:

      - uses: actions/github-script@v7
        id: repos
        env:
          GITHUB_TOKEN: ${{ secrets.DASHBOARD_TEST_TOKEN }}
        with:
          result-encoding: string
          retries: 3
          retry-exempt-status-codes: 400,401
          github-token: ${{ secrets.DASHBOARD_TEST_TOKEN }}
          script: |
            const query = `query Search($cursor: String) {
              search(query: "org:SwanseaUniversityMedical", type: REPOSITORY, first: 100, after: $cursor) {
                pageInfo {
                  hasNextPage
                  endCursor
                },
                repos: edges {
                  node {
                    ... on Repository {
                      name
                      isPrivate
                    }
                  }
                }
              }
            }`;

            let cursor = null;
            let hasNextPage = true;
            const repositories = [];

            while (hasNextPage) {
              const response = await github.graphql(query, { cursor });
              repositories.push(...response.search.repos.map(repo => repo.node.name));
              hasNextPage = response.search.pageInfo.hasNextPage;
              cursor = response.search.pageInfo.endCursor;
            }

            const repos = repositories.join(', '); // Return as a comma-separated string

            const board = `query {
                organization(login: "SwanseaUniversityMedical") {
                  projectV2(number: 15) {
                    id
                  }
                }
              }`;
            
            const boardData = await github.graphql(board);
            const boardID = boardData.organization.projectV2.id
            console.log(boardID)

            const PRQuery = `query PRs($cursor: String, $repo: String) {
              organization(login: "SwanseaUniversityMedical") {
                repository(name: $repo) {
                  pullRequests(first: 100, after: $cursor, states: [OPEN], author: "marvin-serp-bot") {
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                    PRs: edges {
                      node {
                        id                        
                      }
                    }
                  }
                }
              }
            }`;

            const addToBoard = `mutation AddToBoard($boardID: ID!, $PRID: ID!) {
              addProjectV2ItemById(input: {projectId: "PROJECT_ID" contentId: "CONTENT_ID"}) {
                item {
                  id
                }
              }
            }`;
                
            for (let i = 0; i < repositories.length; i++) {
              let cursor = null;
              let hasNextPage = true;
              const issues = [];

              while (hasNextPage) {
                const response = await github.graphql(PRQuery, { cursor }, { repositories[i] });
                issues.push(...response.organization.repository.pullRequests.PRs.map(pr => pr.node.id));
                hasNextPage = response.organization.repository.pullRequests.pageInfo.hasNextPage;
                cursor = response.organization.repository.pullRequests.pageInfo.endCursor;
              }

              for (let i = 0; i < issues.length; i++) {
                await github.graphql(addToBoard, { boardID }, { issues[i] });
              }
            }

              
            

            
#            //add the first page of repositories to the list
#            publicRepositories.push(repos.repositories.nodes)
#            while (repos.pageInfo.hasNextPage) {
#                const repos = await github.graphql(`query Repos($cursor: String) {
#                repositoryOwner(login: "SwanseaUniversityMedical") {
#                    repositories(
#                        first: 100
#                        ownerAffiliations: OWNER
#                        privacy: PUBLIC
#                        isFork: false
#                        isLocked: false
#                        orderBy: { field: NAME, direction: ASC }
#                        after: $cursor
#                    ) {
#                        totalCount
#
#                        pageInfo {
#                            hasNextPage
#                            endCursor
#                        }
#
#                        nodes {
#                            name
#                        }
#                    }
#                }
#            }`)}
#            publicRepositories.push(repos.repositories.nodes)
            
#            //get all issues within the repositories
#            issues = []
#            for (let i = 0; i < publicRepositories.length; i++) {
#                github.graphql(`
#                query {
#                    repository(owner: "owner", name: "${publicRepositories[i].name}") {
#                        issues(first: 100) {
#                            nodes {
#                                id
#                            }
#                        }
#                            pageInfo {
#                            endCursor
#                            hasNextPage
#                        }
#                    }
#                }
#                `)
#                issues.push(data.repository.issues.nodes)
#                while (pageInfo.hasNextPage) {
#                    github.graphql(`
#                    query {
#                        repository(owner: "owner", name: "${publicRepositories[i].name}") {
#                            issues(first: 100, after: "${pageInfo.endCursor}") {
#                                nodes {
#                                    id
#                                }
#                            }
#                            pageInfo {
#                                endCursor
#                                hasNextPage
#                            }
#                        }
#                    }
#                    `)
#                    issues.push(data.repository.issues.nodes)
#                }

#  add-prs:
#    needs: get-board
#    runs-on:
#      labels: [ self-hosted, linux, x64 ]
#      group: heavy
#    steps:
#      - uses: actions/github-script@v7
#        id: my-script
#        with:
#          result-encoding: string
#          retries: 3
#          retry-exempt-status-codes: 400,401
#          script: |
#            github.graphql