name: Project Dashboard

on:
  pull_request:
    paths:
      - '.github/workflows/project-dashboard.yaml'
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  get-board:
    runs-on:
      labels: [ self-hosted, linux, x64 ]
      group: heavy
    steps:
        - uses: octokit/graphql-action@v2.x
          id: get_board
          with:
            query: |
              query {
                organization(login: "SwanseaUniversityMedical") {
                  projectV2(number: 15) {
                    id
                  }
                }
              }
          env:
            GITHUB_TOKEN: ${{ secrets.DASHBOARD_TEST_TOKEN }}
        - run: "echo 'latest release: ${{ steps.get_board.outputs.data }}'"
  get-repos:
    needs: get-board
    runs-on:
      labels: [ self-hosted, linux, x64 ]
      group: heavy
    steps:
      - uses: actions/github-script@v7
        id: first-page
        with:
          result-encoding: string
          retries: 3
          retry-exempt-status-codes: 400,401
          script: |
            const publicRepositories = []
            const repos = await github.graphql(`query Repos($cursor: String) {
              repositoryOwner(login: "SwanseaUniversityMedical") {
                  repositories(
                      first: 100
                      ownerAffiliations: OWNER
                      privacy: PUBLIC
                      isFork: false
                      isLocked: false
                      orderBy: { field: NAME, direction: ASC }
                      after: $cursor
                  ) {
                      totalCount
                                  
                      pageInfo {
                          hasNextPage
                          endCursor
                      }
                                  
                      nodes {
                          name
                      }
                  }
              }
            }`)
            
            
            //add the first page of repositories to the list
            publicRepositories.push(repos.repositories.nodes)
            while (data.pageInfo.hasNextPage) {
                const data = await github.graphql(`query Repos($cursor: String) {
                repositoryOwner(login: "SwanseaUniversityMedical") {
                    repositories(
                        first: 100
                        ownerAffiliations: OWNER
                        privacy: PUBLIC
                        isFork: false
                        isLocked: false
                        orderBy: { field: NAME, direction: ASC }
                        after: $cursor
                    ) {
                        totalCount

                        pageInfo {
                            hasNextPage
                            endCursor
                        }

                        nodes {
                            name
                        }
                    }
                }
            }`)}
            publicRepositories.push(data.repositories.nodes)
            
#            //get all issues within the repositories
#            issues = []
#            for (let i = 0; i < publicRepositories.length; i++) {
#                github.graphql(`
#                query {
#                    repository(owner: "owner", name: "${publicRepositories[i].name}") {
#                        issues(first: 100) {
#                            nodes {
#                                id
#                            }
#                        }
#                            pageInfo {
#                            endCursor
#                            hasNextPage
#                        }
#                    }
#                }
#                `)
#                issues.push(data.repository.issues.nodes)
#                while (pageInfo.hasNextPage) {
#                    github.graphql(`
#                    query {
#                        repository(owner: "owner", name: "${publicRepositories[i].name}") {
#                            issues(first: 100, after: "${pageInfo.endCursor}") {
#                                nodes {
#                                    id
#                                }
#                            }
#                            pageInfo {
#                                endCursor
#                                hasNextPage
#                            }
#                        }
#                    }
#                    `)
#                    issues.push(data.repository.issues.nodes)
#                }

#  add-prs:
#    needs: get-board
#    runs-on:
#      labels: [ self-hosted, linux, x64 ]
#      group: heavy
#    steps:
#      - uses: actions/github-script@v7
#        id: my-script
#        with:
#          result-encoding: string
#          retries: 3
#          retry-exempt-status-codes: 400,401
#          script: |
#            github.graphql